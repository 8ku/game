[
  
  {
    "title": "Main Tree",
    "url": "/game/posts/mainTree/",
    "categories": "MainTree",
    "tags": "construct",
    "date": "2022-09-24 00:00:00 +0800",
    





    "snippet": "结构classDiagram    PlayerManager &lt;-- InputHandler    PlayerManager &lt;-- CameraHandler    PlayerManager &lt;-- Animator    PlayerManager &lt;-- PlayerLocomotion    InputHandler &lt;-- PlayerController    InputHandler &lt;-- PlayerAttacker    InputHandler &lt;-- PlayerInventory    InputHandler &lt;-- PlayerManager    Item &lt;|-- WeaponItem    PlayerInventory &lt;-- WeaponItem    PlayerInventory &lt;-- WeaponSlotManager    WeaponSlotManager &lt;-- WeaponHolderSlot    PlayerAttacker &lt;-- AnimatorHandler    PlayerAttacker &lt;-- InputHandler    PlayerStats &lt;-- AnimatorHandler    PlayerStats &lt;-- HealthBar    PlayerLocomotion &lt;-- InputHandler    PlayerLocomotion &lt;-- PlayerManager    PlayerLocomotion &lt;-- AnimatorHandler    AnimatorHandler &lt;-- PlayerManager    AnimatorHandler &lt;-- Animator    class PlayerManager{    \tBelongs: Player      Update state      \t- Animator.GetBool(\"isInteracting\")      \t- Animator.GetBool(\"canDoCombo\")      \t- InputHandler.TickInput()      \t- Playerlocomotion.HandleMovement()      \t- Playerlocomotion.HandleRollingAndSprinting()      \t- Playerlocomotion.HandleFalling()      \t- CameraHandler.FollowTarget()      \t- CameraHandler.HandleCameraRotation()      \t      Handles Flags(isSprinting, isFalling, isParrying, isInteracting, isInAir)      Connects all other functionality to player.(Other scripts)    }    class InputHandler{    \tBelongs: Player    \tManager action's flags    \tDefine function    \t- TickInput()    \t- MoveInput()    \t- HandleRollInput()    \t- HandleAttackInput()    }    class PlayerLocomotion{    \tBelongs: Player    \tDefine function    \t- HandleRotation()    \t- HandleMovement()    \t- HandleRollingAndSprinting()    \t- HandleFalling()    }        class PlayerController{      Create from Input Actions.    }        class PlayerAttacker{    \tBelongs: Player    \tDefine function    \t- HandleWeaponCombo()    \t- HandleLightAttack()    \t- HandleHeavyAttack()    }        class PlayerInventory{    }        class PlayerStats{    \tBelongs: Player    \tHandles player's status    \tDefine function    \t- SetMaxHealthFromHealthLevel()    \t- TakeDamage()    }    class AnimatorHandler{    \tBelongs: Player's Prefab    \tDefine function    \t- UpdateAnimatorValue()    \t- PlayTargetAnimation()    \t- CanRotate()    \t- StopRotation()    \t- EnableCombo()    \t- DisableCombo()    \t- OnAnimatorMove()    }        class CameraHandler{    \tBelongs: Camera.main    \tDefine function    \t- FollowTarget()    \t- HandleCameraRotation()    \t- HandleCameraCollisions()    }        class Item~ScriptableObject~{    \tDefine item's icon, name    }        class WeaponItem{    \tDefine weapon's gameobject, isUnarmed, animation     \tstring OH_Light_Attack_1 = Animation clip name    \tInclude    \t- GameObject modelPrefab    \t- bool isUnarmed    \t- string OH_Light_Attack_1;    \t- string OH_Heavy_Attack_1;    }        class PlayerInventory{    \tBelongs: Player    \t- Load weapon on Slot    }        class WeaponSlotManager{    \tBelongs: Player's Prefab    \tDefine funtion    \t- LoadWeaponOnSlot()    \t- LoadLeftHandWeaponDamageCollider()    \t- LoadRightHandWeaponDamageCollider()    \t- OpenLeftDamageCollider()    \t- OpenRightDamageCollider()    \t- CloseLeftDamageCollider()    \t- CloseLeftDamageCollider()    }        class WeaponHolderSlot{    \tBelongs: Left/Right hand of player's Prefab    \tDefine function    \t- UnloadWeapon()    \t- UnloadWeaponAndDestroy()    \t- LoadWeaponModel()    }     class HealthBar{    \tBelongs: Canvas - HealthBar(UI)\t\t\tDefine function\t\t\t- SetMaxHealth()\t\t\t- SetCurrnetHealth()    }        class DamageCollider{    \tBelongs: weapon's prefab    \tuse: Add animation event to player's Animation clip    }关于 Input system      安装新版 InputSystem 之后，右键新建 Input Actions , 生成一个 c# 文件        在 InputHandler 中直接调用    InputActions inputActions;   private void OnEnable(){    if (inputActions == null){       inputActions = new InputActions;       }}      "
  },
  
  {
    "title": "Animation",
    "url": "/game/posts/Animation/",
    "categories": "Animation",
    "tags": "Animation",
    "date": "2022-09-24 00:00:00 +0800",
    





    "snippet": "State MachineBase LayerLocomotion  Is Blend Tree  Include idle, walking, Running, Sprint etc basic motion  Change Position y(move forward) to set move position of motion            Motion      Pos X      Pos Y                  idle      0      0              Walking      0      0.5              Running      0      1              Sprint      0      2      flowchart TD\tsubgraph Base Layer\tEntry --&gt; Locomotion\t\tsubgraph Locomotion\t\tBlendTree --&gt; idle\t\tBlendTree --&gt; Walking\t\tBlendTree --&gt; Running\t\tBlendTree --&gt; Sprint\t\tend\tendOverride(Layer)  Set Weight to 1 in ⚙️  Select Blending to Override          Use Override to replace the animation on previous layers      Use Additive to add the animation on top of the animation from previous layers        Create new state Empty  Create new scripts name ResetAnimatorBool in Empty to reset animationpubic class ResetAnimatorBool: StateMachineBehaviour //notice class{  public string targetBool;  public bool status;    public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)  {    animator.SetBool(targetBool, status);  }}flowchart TD\tsubgraph Override\t\tDead\t\tDamage --&gt; Empty\t\tFalling\t\tLand --&gt; Empty\t\tRolling --&gt; Empty\t\tBackstep --&gt; Empty\t\tlight_attack --&gt; Empty\t\theavy_attack --&gt; Empty\tendParameters            Type      Name      Default Value      memo                  int      Vectical      0      input value, quote in AnimatorHandler              int      Horizontal      0      input value, quote in AnimatorHandler              bool      isInteracting      false                     bool      canDoCombo      false             "
  }
  
]

