[
  
  {
    "title": "Main Tree",
    "url": "/game/posts/mainTree/",
    "categories": "MainTree",
    "tags": "construct",
    "date": "2022-09-24 00:00:00 +0800",
    





    "snippet": "结构classDiagram    PlayerManager &lt;-- InputHandler    PlayerManager &lt;-- CameraHandler    PlayerManager &lt;-- Animator    PlayerManager &lt;-- PlayerLocomotion    PlayerManager &lt;-- WeaponSlotManager    PlayerManager &lt;-- InteractableUI    InputHandler &lt;-- PlayerController    InputHandler &lt;-- PlayerAttacker    InputHandler &lt;-- PlayerInventory    InputHandler &lt;-- PlayerManager    InputHandler &lt;-- UIManager    Item &lt;|-- WeaponItem    Interactable &lt;|-- WeaponPickUp    PlayerInventory &lt;-- WeaponItem    PlayerInventory &lt;-- WeaponSlotManager    WeaponSlotManager &lt;-- WeaponHolderSlot    WeaponSlotManager &lt;-- DamageCollider    WeaponSlotManager &lt;-- Animator    WeaponSlotManager &lt;-- QuickSlotsUI    WeaponSlotManager &lt;-- PlayerStats    PlayerAttacker &lt;-- AnimatorHandler    PlayerAttacker &lt;-- InputHandler    PlayerStats &lt;-- AnimatorHandler    PlayerStats &lt;-- HealthBar    PlayerStats &lt;-- StaminaBar    PlayerLocomotion &lt;-- InputHandler    PlayerLocomotion &lt;-- PlayerManager    PlayerLocomotion &lt;-- AnimatorHandler    AnimatorHandler &lt;-- PlayerManager    AnimatorHandler &lt;-- Animator    class PlayerManager{    \tBelongs: Player      Update state      \t- Animator.GetBool(\"isInteracting\")      \t- Animator.GetBool(\"canDoCombo\")      \t- InputHandler.TickInput()      \t- Playerlocomotion.HandleMovement()      \t- Playerlocomotion.HandleRollingAndSprinting()      \t- Playerlocomotion.HandleFalling()      \t- CheckForInteractableObject()      \t- CameraHandler.FollowTarget()      \t- CameraHandler.HandleCameraRotation()      \t      Handles Flags(isSprinting, isFalling, isParrying, isInteracting, isInAir)\t\t\t- [Define function]CheckForInteractableObject()    }    class InputHandler{    \tBelongs: Player    \tManager action's flags    \tDefine function    \t- TickInput()    \t- MoveInput()    \t- HandleRollInput()    \t- HandleAttackInput()    \t- HandleQuickSlotInput()    \t- HandleInteractingButtonInput()    }    class PlayerLocomotion{    \tBelongs: Player    \tDefine function    \t- HandleRotation()    \t- HandleMovement()    \t- HandleRollingAndSprinting()    \t- HandleFalling()    }        class PlayerController{      Create from Input Actions.    }        class PlayerAttacker{    \tBelongs: Player    \tDefine function    \t- HandleWeaponCombo()    \t- HandleLightAttack()    \t- HandleHeavyAttack()    }        class PlayerInventory{    }        class PlayerStats{    \tBelongs: Player    \tHandles player's status    \tDefine function    \t- SetMaxHealthFromHealthLevel()    \t- TakeDamage()    \t- TakeStaminaDamage()    }    class AnimatorHandler{    \tBelongs: Player's Prefab    \tDefine function    \t- UpdateAnimatorValue()    \t- PlayTargetAnimation()    \t- CanRotate()    \t- StopRotation()    \t- EnableCombo()    \t- DisableCombo()    \t- OnAnimatorMove()    }        class CameraHandler{    \tBelongs: Camera.main    \tDefine function    \t- FollowTarget()    \t- HandleCameraRotation()    \t- HandleCameraCollisions()    }        class Item~ScriptableObject~{    \tDefine item's icon, name    }        class WeaponItem{    \tDefine weapon's gameobject, isUnarmed, animation     \tstring OH_Light_Attack_1 = Animation clip name    \tInclude    \t- GameObject modelPrefab    \t- bool isUnarmed    \t- string right_hand_idle;    \t- string left_hand_idle;    \t- string OH_Light_Attack_1;    \t- string OH_Heavy_Attack_1;    \t- int baseStamina;    \t- float lightAttackMultiplier;    \t- float heavyAttackMultiplier;    }        class PlayerInventory{    \tBelongs: Player    \t- Load weapon on Slot    \t- Storing picked up weapons    \tdefine function    \t- ChangeRightWeapon()    \t- ChangeLeftWeapon()    }        class WeaponSlotManager{    \tBelongs: Player's Prefab    \tDefine funtion    \t- LoadWeaponOnSlot()    \t- LoadLeftHandWeaponDamageCollider()    \t- LoadRightHandWeaponDamageCollider()    \t- OpenLeftDamageCollider()    \t- OpenRightDamageCollider()    \t- CloseLeftDamageCollider()    \t- CloseLeftDamageCollider()    \t- DrainStaminaLightAttack()    \t    }        class WeaponHolderSlot{    \tBelongs: Left/Right hand of player's Prefab    \tDefine function    \t- UnloadWeapon()    \t- UnloadWeaponAndDestroy()    \t- LoadWeaponModel()    }     class HealthBar{    \tBelongs: Canvas - HealthBar(UI)\t\t\tDefine function\t\t\t- SetMaxHealth()\t\t\t- SetCurrnetHealth()    }        class StaminaBar{    \tBelongs: Canvas - StaminaBar(UI)\t\t\tDefine function\t\t\t- SetMaxStamina()\t\t\t- SetCurrnetStamina()    }        class DamageCollider{    \tBelongs: weapon's prefab    \tuse: Add animation event to player's Animation clip    }    class QuickSlotsUI{    \tBelongs: Canvas - QuickSlots(UI)    }        class Interactable{    \tDefine function    \t- Interact()    }        class WeaponPickUp{    \tBelongs: Weapon which can pick up    \tDefine function    \t- [override]Interact()    \t- PickupItem()    }        class InteractableUI{    \tBelongs: Canvas - Interaction Pop Up(UI)    }        class UIManager{    \tBelongs: Canvas(UI)    \tDefine function    \t- OpenSelectWindow();    }Input system      安装新版 InputSystem 之后，右键新建 Input Actions（命名为 PlayerController），生成一个 c# 文件        在 InputHandler 中直接调用    PlayerController inputActions;   private void OnEnable(){    if (inputActions == null){       inputActions = new PlayerController;       }}      Walk调用 input Actions 里的按键 - 移动public Vector2 movementInput;PlayerController inputActions;inputActions.Player.Move.performed += keyboardInput =&gt; movementInput = keyboardInput.ReadValue&lt;Vector2&gt;();  inputAction：PlayerController’s name  Player：Action Map’s name  Move：Action’s name  keyboardInput：临时变量，用于传递变量值Attack      判断按键是否被按下，如果按下，调用 playerAttacker 里的 HandleLightAttack 方法    HandleLightAttack 方法执行对应的 animation  武器的伤害用挂载在武器 prefab 上的 DamageCollider 脚本触发public bool rb_input; inputActions.Player.RightButton.performed += i =&gt; rb_input = true;"
  },
  
  {
    "title": "UI",
    "url": "/game/posts/UI/",
    "categories": "UI",
    "tags": "UI",
    "date": "2022-09-24 00:00:00 +0800",
    





    "snippet": "Tips图片适配父对象技巧  添加 Aspect Radio Filter component  Set Aspect Mode to Fit in Parent  Set Aspect Radio to 1文本框背景随文字动态缩放  在 UI Canvas 下新建一个空对象 Container          添加 Vertical Layout Group                  Child Alignment : Upper Center          Control Child Size : Width &amp; Height                    添加 Content Size Fitter                  Vertical Fit : Preferred Size                      在 Container 下新建 Image 作为提示框背景          添加 Vertical Layout Group                  Child Alignment : Middle Center          Control Child Size : Height          Use Child Scale : Width &amp; Height          Child Force Expand : Width                    "
  },
  
  {
    "title": "Pass Value",
    "url": "/game/posts/PassValue/",
    "categories": "Code",
    "tags": "Functions",
    "date": "2022-09-24 00:00:00 +0800",
    





    "snippet": "技巧通过物体身上的component传值通过一个物体身上的组件，获取同一个物体身上的另一个组件的技巧。Player:  PlayerManager.cs  PlayerInventory.cs  PlayerLocomition一个脚本 WeaponPickUp通过 PlayerManager 获取 PlayerInventory PlayerLocomitionpublic class WeaponPickUp: Interactable{  private void PickUpItem(PlayerManager playerManager)  {    PlayerInventory playerInventory;    PlayerLocomotion playerLocomotion;        playerInventory = playerManager.GetComponent&lt;PlayerInventory&gt;();    playerLocomotion = playerManager.GetComponent&lt;PlayerLocomotion&gt;();  }}"
  },
  
  {
    "title": "Animation",
    "url": "/game/posts/Animation/",
    "categories": "Animation",
    "tags": "Animation",
    "date": "2022-09-24 00:00:00 +0800",
    





    "snippet": "State MachineBase LayerLocomotion  Is Blend Tree  Include idle, walking, Running, Sprint etc basic motion  Change Position y(move forward) to set move position of motion            Motion      Pos X      Pos Y                  idle      0      0              Walking      0      0.5              Running      0      1              Sprint      0      2      flowchart TD\tsubgraph Base Layer\tEntry --&gt; Locomotion\t\tsubgraph Locomotion\t\tBlendTree --&gt; idle\t\tBlendTree --&gt; Walking\t\tBlendTree --&gt; Running\t\tBlendTree --&gt; Sprint\t\tend\tendRight Arm  Set Weight to 0.8 in ⚙️  Create a Avatar Mask named Right Arm, Set right arm part active in Humanoid  Put Avatar mask in Mask  Create Empty State named Right Arm Empty  Put Animation clip in this layerflowchart TD\tsubgraph Right Arm\t\tRight_Arm_Idle\tendLeft Arm  Set Weight to 0.8 in ⚙️  Create a Avatar Mask named Left Arm, Set left arm part active in Humanoid  Put Avatar mask in Mask  Create Empty State named Left Arm Empty  Put Animation clip in this layerflowchart TD\tsubgraph Left Arm\t\tLeft_Arm_Idle\tendOverride(Layer)  Set Weight to 1 in ⚙️  Select Blending to Override          Use Override to replace the animation on previous layers      Use Additive to add the animation on top of the animation from previous layers        Create new state Empty  Create new scripts name ResetAnimatorBool in Empty to reset animationpubic class ResetAnimatorBool: StateMachineBehaviour //notice class{  public string targetBool;  public bool status;    public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)  {    animator.SetBool(targetBool, status);  }}flowchart TD\tsubgraph Override\t\tDead\t\tDamage --&gt; Empty\t\tFalling\t\tLand --&gt; Empty\t\tRolling --&gt; Empty\t\tBackstep --&gt; Empty\t\tlight_attack --&gt; Empty\t\theavy_attack --&gt; Empty\t\tPick_up --&gt; Empty\tendParameters            Type      Name      Default Value      memo                  int      Vectical      0      input value, quote in AnimatorHandler              int      Horizontal      0      input value, quote in AnimatorHandler              bool      isInteracting      false                     bool      canDoCombo      false             Play AnimationAnimatorHandlerpublic void PlayTargetAnimation(string targetAnim, bool isInteracting){  anim.applyRootMotion = isInteracting;  anim.SetBool(\"isInteracting\", isInteracting);  anim.CrossFade(targetanim, 0.2f);}Script which need play animationanimatorHandler.PlayTargetAnimation(\"Pick Up Item\", true);Wait For Second Methodprivate void Update(){  StartCoroutine(WaitForSecond());}private IEnumerator WaitForSecond(){ \tyield return new WaitForSeconds(0.35f); }"
  }
  
]

